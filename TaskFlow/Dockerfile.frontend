# Frontend Dockerfile for TaskFlow - Optimized multi-stage build
# Stage 1: Dependencies
FROM node:18-alpine AS dependencies
WORKDIR /app

# Copy package files for better layer caching
COPY frontend/package*.json ./

# Install dependencies with npm ci for faster, reliable builds
RUN npm ci --legacy-peer-deps && npm cache clean --force

# Stage 2: Build
FROM node:18-alpine AS build
WORKDIR /app

# Copy dependencies from previous stage
COPY --from=dependencies /app/node_modules ./node_modules

# Copy source code
COPY frontend/ .

# Build the application
RUN npm run build

# Stage 3: Production
FROM nginx:1.25-alpine AS production

# Create non-root user for security (nginx group already exists)
RUN adduser -S taskflow -u 1001 -G nginx

# Copy custom nginx configuration
COPY <<EOF /etc/nginx/conf.d/default.conf
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;
    
    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    
    # Handle client-side routing
    location / {
        try_files \$uri \$uri/ /index.html;
    }
    
    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)\$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}
EOF

# Copy built application from build stage
COPY --from=build --chown=taskflow:nginx /app/build /usr/share/nginx/html

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

# Switch to non-root user
USER taskflow

EXPOSE 80

# Use exec form for better signal handling
CMD ["nginx", "-g", "daemon off;"]
