# Ultra-Fast CI/CD with Aggressive Optimizations
name: Ultra-Fast CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20.x"
  # Ultra-aggressive npm optimizations
  NPM_CONFIG_PROGRESS: "false"
  NPM_CONFIG_LOGLEVEL: "error"
  NPM_CONFIG_AUDIT: "false"
  NPM_CONFIG_FUND: "false"
  NPM_CONFIG_UPDATE_NOTIFIER: "false"
  CI: "true"

jobs:
  # Detect changes to determine what to build
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'TaskFlow/backend/**'
            frontend:
              - 'TaskFlow/frontend/**'

  # Backend pipeline - only runs if backend changed
  backend-pipeline:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js with Corepack
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: TaskFlow/backend/package-lock.json

      - name: ⚡ Enable Corepack for speed
        run: corepack enable

      - name: 💾 Extreme Cache Strategy
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: |
            TaskFlow/backend/node_modules
            ~/.npm
            ~/.cache/yarn
          key: backend-extreme-${{ hashFiles('TaskFlow/backend/package-lock.json') }}-v2
          restore-keys: |
            backend-extreme-${{ hashFiles('TaskFlow/backend/package-lock.json') }}-
            backend-extreme-

      - name: 🚀 Lightning Install (< 1 min target)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          cd TaskFlow/backend
          # Use npm with maximum parallelism and aggressive caching
          npm ci --silent --prefer-offline --no-audit --no-fund --no-optional --ignore-scripts --maxsockets 20 --network-timeout 30000

      - name: 🔍 Fast Lint & Test
        run: |
          cd TaskFlow/backend
          npm run lint --silent
          npm test -- --coverage --watchAll=false --maxWorkers=2 --silent --verbose=false

      - name: 🏗️ Silent Build
        run: |
          cd TaskFlow/backend
          npm run build --if-present --silent

      - name: 🔒 Quick Security Check
        run: |
          cd TaskFlow/backend
          npm audit --audit-level=high --silent || echo "High vulnerabilities found"

  # Frontend pipeline - only runs if frontend changed
  frontend-pipeline:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js with Corepack
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: TaskFlow/frontend/package-lock.json

      - name: ⚡ Enable Corepack for speed
        run: corepack enable

      - name: 💾 Extreme Frontend Cache
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: |
            TaskFlow/frontend/node_modules
            ~/.npm
            ~/.cache/yarn
            TaskFlow/frontend/.next/cache
          key: frontend-extreme-${{ hashFiles('TaskFlow/frontend/package-lock.json') }}-v2
          restore-keys: |
            frontend-extreme-${{ hashFiles('TaskFlow/frontend/package-lock.json') }}-
            frontend-extreme-

      - name: 🚀 Use CI-Optimized Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          cd TaskFlow/frontend
          # Use lightweight package.json for CI (removes Storybook, Cypress, etc.)
          cp package.ci.json package.json
          # Generate optimized package-lock.json
          npm install --package-lock-only --silent

      - name: ⚡ Lightning Install (< 90 seconds target)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          cd TaskFlow/frontend
          # Ultra-fast install with minimal dependencies (60-80% fewer packages)
          npm ci --silent --prefer-offline --no-audit --no-fund --no-optional --ignore-scripts --maxsockets 20 --network-timeout 60000

      - name: 🔍 Fast Lint & Test
        run: |
          cd TaskFlow/frontend
          npm run lint --silent
          npm test -- --coverage --watchAll=false --maxWorkers=2 --silent --verbose=false

      - name: 🏗️ Silent Build
        run: |
          cd TaskFlow/frontend
          npm run build --silent

  # Deploy backend - only if backend changed and on main branch
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [detect-changes, backend-pipeline]
    if: |
      needs.detect-changes.outputs.backend-changed == 'true' &&
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Create deployment package
        run: |
          mkdir -p backend-deploy
          cp -r TaskFlow/backend/* backend-deploy/
          cd backend-deploy
          npm ci --omit=dev --silent --prefer-offline --no-audit --no-fund --no-optional --ignore-scripts

      - name: 🚀 Deploy to Azure
        uses: azure/webapps-deploy@v3
        with:
          app-name: "taskflow-backend-legion"
          slot-name: "Production"
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_BACKEND }}
          package: ./backend-deploy

  # Deploy frontend - only if frontend changed and on main branch
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [detect-changes, frontend-pipeline]
    if: |
      needs.detect-changes.outputs.frontend-changed == 'true' &&
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 💾 Restore frontend cache
        uses: actions/cache@v3
        with:
          path: TaskFlow/frontend/node_modules
          key: frontend-deps-${{ hashFiles('TaskFlow/frontend/package-lock.json') }}

      - name: 🏗️ Build for production
        run: |
          cd TaskFlow/frontend
          npm run build --silent

      - name: 📦 Prepare deployment
        run: |
          cd TaskFlow/frontend
          cp server.js build/
          cd build
          cat > package.json << 'EOF'
          {
            "name": "taskflow-frontend",
            "version": "1.0.2",
            "private": true,
            "dependencies": {
              "express": "^4.21.2"
            },
            "scripts": {
              "start": "node server.js"
            }
          }
          EOF

      - name: 🚀 Deploy to Azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: "taskflow-webapp-legion"
          slot-name: "production"
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: TaskFlow/frontend/build
