# Complete Continuous Deployment Pipeline with DevSecOps Integration
name: CD Pipeline - Full Automation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18.x"
  AZURE_WEBAPP_NAME_STAGING: "taskflow-webapp-staging"
  AZURE_WEBAPP_NAME_PROD: "taskflow-webapp-legion"
  CONTAINER_REGISTRY: "taskflowacr12345.azurecr.io"

jobs:
  # Stage 1: Build and Test
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: TaskFlow/${{ matrix.service }}/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd TaskFlow/${{ matrix.service }}
          npm ci

      - name: 🔍 Run ESLint
        run: |
          cd TaskFlow/${{ matrix.service }}
          npm run lint

      - name: 🧪 Run tests with coverage
        run: |
          cd TaskFlow/${{ matrix.service }}
          npm test -- --coverage --watchAll=false

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: TaskFlow/${{ matrix.service }}/coverage/lcov.info
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage
          fail_ci_if_error: false

      - name: 🏗️ Build application
        run: |
          cd TaskFlow/${{ matrix.service }}
          npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-build
          path: TaskFlow/${{ matrix.service }}/build
          retention-days: 1

  # Stage 2: Security Scanning (DevSecOps)
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: build-and-test
    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: TaskFlow/${{ matrix.service }}/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd TaskFlow/${{ matrix.service }}
          npm ci

      - name: 🔍 Run npm audit (Dependency Vulnerability Scan)
        run: |
          cd TaskFlow/${{ matrix.service }}
          npm audit --audit-level=moderate --json > npm-audit-${{ matrix.service }}.json || true
          echo "## NPM Audit Results for ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level=moderate || echo "Vulnerabilities found - check details above"

      - name: 🐳 Build Docker image for security scan
        run: |
          docker build -f TaskFlow/Dockerfile.${{ matrix.service }} -t ${{ matrix.service }}:security-scan TaskFlow/

      - name: 🔒 Run Trivy container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ matrix.service }}:security-scan"
          format: "sarif"
          output: "trivy-${{ matrix.service }}.sarif"

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-${{ matrix.service }}.sarif"

      - name: 📊 Security scan summary
        run: |
          echo "## Security Scan Summary for ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ NPM Audit completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Container image scan completed" >> $GITHUB_STEP_SUMMARY
          echo "📋 Check the Security tab for detailed results" >> $GITHUB_STEP_SUMMARY

  # Stage 3: Build and Push Container Images
  build-and-push:
    name: 🐳 Build & Push Images
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: 🏷️ Generate image tags
        id: meta
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tags=${{ env.CONTAINER_REGISTRY }}/taskflow-${{ matrix.service }}:latest,${{ env.CONTAINER_REGISTRY }}/taskflow-${{ matrix.service }}:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "tags=${{ env.CONTAINER_REGISTRY }}/taskflow-${{ matrix.service }}:develop,${{ env.CONTAINER_REGISTRY }}/taskflow-${{ matrix.service }}:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: TaskFlow/
          file: TaskFlow/Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: 📊 Build summary
        run: |
          echo "## Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "🐳 **Service**: ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "🌍 **Environment**: ${{ steps.meta.outputs.environment }}" >> $GITHUB_STEP_SUMMARY

  # Stage 4: Deploy to Staging (develop branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://${{ env.AZURE_WEBAPP_NAME_STAGING }}.azurewebsites.net

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🚀 Deploy to Azure Web App (Staging)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_STAGING }}
          images: ${{ env.CONTAINER_REGISTRY }}/taskflow-frontend:develop

      - name: 🔍 Health check
        run: |
          echo "⏳ Waiting for deployment to be ready..."
          sleep 30
          curl -f https://${{ env.AZURE_WEBAPP_NAME_STAGING }}.azurewebsites.net/health || echo "Health check failed"

      - name: 📊 Deployment summary
        run: |
          echo "## Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "🌍 **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **URL**: https://${{ env.AZURE_WEBAPP_NAME_STAGING }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status**: Deployed successfully" >> $GITHUB_STEP_SUMMARY

  # Stage 5: Deploy to Production (main branch with manual approval)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://${{ env.AZURE_WEBAPP_NAME_PROD }}.azurewebsites.net

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🚀 Deploy to Azure Web App (Production)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_PROD }}
          images: ${{ env.CONTAINER_REGISTRY }}/taskflow-frontend:latest

      - name: 🔍 Health check
        run: |
          echo "⏳ Waiting for deployment to be ready..."
          sleep 30
          curl -f https://${{ env.AZURE_WEBAPP_NAME_PROD }}.azurewebsites.net/health || echo "Health check failed"

      - name: 📊 Deployment summary
        run: |
          echo "## Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "🌍 **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **URL**: https://${{ env.AZURE_WEBAPP_NAME_PROD }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status**: Deployed successfully" >> $GITHUB_STEP_SUMMARY

      - name: 🏷️ Create release tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          VERSION=$(date +%Y.%m.%d)-${{ github.run_number }}
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

  # Stage 6: Update CHANGELOG
  update-changelog:
    name: 📝 Update CHANGELOG
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Update CHANGELOG.md
        run: |
          VERSION=$(date +%Y.%m.%d)-${{ github.run_number }}
          DATE=$(date +%Y-%m-%d)

          # Create new changelog entry
          cat > temp_changelog.md << EOF
          # Changelog

          All notable changes to this project will be documented in this file.

          The format is based on [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/).

          ## [v$VERSION] - $DATE

          ### Deployed
          - 🚀 Automated deployment to production
          - 🔒 Security scans completed successfully
          - 🧪 All tests passed
          - 📊 Monitoring and logging active

          ### Commit
          - ${{ github.event.head_commit.message }}

          EOF

          # Append existing changelog (skip header)
          tail -n +8 CHANGELOG.md >> temp_changelog.md
          mv temp_changelog.md CHANGELOG.md

      - name: 💾 Commit CHANGELOG update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG for automated deployment" || exit 0
          git push

  # Stage 7: Monitoring and Alerts Setup
  setup-monitoring:
    name: 📊 Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 🔑 Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 📊 Configure Application Insights Alert
        run: |
          # Create alert rule for application failures
          az monitor metrics alert create \
            --name "TaskFlow-HighErrorRate" \
            --resource-group "taskflow-rg" \
            --scopes "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/taskflow-rg/providers/Microsoft.Web/sites/${{ env.AZURE_WEBAPP_NAME_PROD }}" \
            --condition "count 'Http Server Errors' > 5" \
            --window-size 5m \
            --evaluation-frequency 1m \
            --severity 2 \
            --description "Alert when error rate is high" || echo "Alert already exists"

      - name: 📈 Monitoring summary
        run: |
          echo "## Monitoring Setup Summary" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Application Insights**: Configured" >> $GITHUB_STEP_SUMMARY
          echo "🚨 **Alerts**: High error rate alert active" >> $GITHUB_STEP_SUMMARY
          echo "📈 **Dashboard**: Available in Azure Portal" >> $GITHUB_STEP_SUMMARY
