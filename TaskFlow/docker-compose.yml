version: "3.8"

# TaskFlow - Production-ready Docker Compose Configuration
services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: taskflow-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: taskflow
      POSTGRES_PASSWORD: taskflowpass
      POSTGRES_DB: taskflow
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskflow -d taskflow"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - taskflow-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: ../Dockerfile.backend
      target: production
    container_name: taskflow-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://taskflow:taskflowpass@db:5432/taskflow
      NODE_ENV: production
      PORT: 5000
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - taskflow-network

  # Frontend Web Service
  frontend:
    build:
      context: ./frontend
      dockerfile: ../Dockerfile.frontend
      target: production
    container_name: taskflow-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000}
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "3000:80"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    networks:
      - taskflow-network

# Named volumes for data persistence
volumes:
  db_data:
    driver: local
    name: taskflow_db_data

# Custom network for service communication
networks:
  taskflow-network:
    driver: bridge
    name: taskflow_network
