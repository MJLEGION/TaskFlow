name: Deploy to Azure

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Install backend dependencies
        run: |
          cd TaskFlow/backend
          npm ci

      - name: Install frontend dependencies
        run: |
          cd TaskFlow/frontend
          npm ci

      - name: Build frontend
        run: |
          cd TaskFlow/frontend
          # Disable treating warnings as errors in CI
          CI=false npm run build

      - name: Prepare deployment package
        run: |
          # Create deployment directory
          mkdir -p deploy

          # Copy backend files
          cp -r TaskFlow/backend/* deploy/

          # Copy built frontend to backend's public directory
          mkdir -p deploy/public
          cp -r TaskFlow/frontend/build/* deploy/public/

          # Create a simple Express server that serves both API and frontend
          cat > deploy/server.js << 'EOF'
          const express = require('express');
          const path = require('path');
          const cors = require('cors');
          const helmet = require('helmet');
          const rateLimit = require('express-rate-limit');
          require('dotenv').config();

          const app = express();
          const PORT = process.env.PORT || 8080;

          // Security middleware
          app.use(helmet({
            contentSecurityPolicy: false // Disable for React app
          }));

          // CORS middleware
          app.use(cors());

          // Rate limiting
          const limiter = rateLimit({
            windowMs: 15 * 60 * 1000,
            max: 100
          });
          app.use(limiter);

          // Body parsing
          app.use(express.json());
          app.use(express.urlencoded({ extended: true }));

          // Serve static files from React build
          app.use(express.static(path.join(__dirname, 'public')));

          // API Routes
          app.get('/api/health', (req, res) => {
            res.json({ 
              status: 'OK', 
              timestamp: new Date().toISOString(),
              message: 'TaskFlow is running!'
            });
          });

          app.get('/api/projects', (req, res) => {
            res.json({ 
              projects: [
                { id: 1, name: 'Sample Project', description: 'Demo project' }
              ]
            });
          });

          app.get('/api/tasks', (req, res) => {
            res.json({ 
              tasks: [
                { id: 1, title: 'Sample Task', status: 'todo', projectId: 1 }
              ]
            });
          });

          // Catch all API routes
          app.use('/api/*', (req, res) => {
            res.json({ 
              message: 'API endpoint placeholder',
              endpoint: req.originalUrl
            });
          });

          // Serve React app for all other routes
          app.get('*', (req, res) => {
            res.sendFile(path.join(__dirname, 'public', 'index.html'));
          });

          // Error handling
          app.use((err, req, res, next) => {
            console.error(err.stack);
            res.status(500).json({ error: 'Something went wrong!' });
          });

          app.listen(PORT, () => {
            console.log(`ðŸš€ TaskFlow running on port ${PORT}`);
          });
          EOF

          # Create startup script for Azure Linux
          echo "npm start" > deploy/startup.sh
          chmod +x deploy/startup.sh

          # Create package.json with start script for Linux deployment
          cat > deploy/package.json << 'EOF'
          {
            "name": "taskflow-backend",
            "version": "1.0.0",
            "description": "TaskFlow Backend API",
            "main": "server.js",
            "scripts": {
              "start": "node server.js",
              "dev": "nodemon server.js"
            },
            "dependencies": {
              "express": "^4.18.2",
              "cors": "^2.8.5",
              "helmet": "^7.0.0",
              "express-rate-limit": "^6.7.0",
              "dotenv": "^16.0.3"
            },
            "engines": {
              "node": ">=18.0.0"
            }
          }
          EOF

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: "taskflow-webapp-legion"
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: "./deploy"
          startup-command: "npm start"
